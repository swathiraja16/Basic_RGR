/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *  strict-local
 * @format
 */

'use strict';

var _classCallCheck3 = _interopRequireDefault(require('babel-runtime/helpers/classCallCheck'));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

/**
 * A file backed cache. Values are JSON encoded on disk, so only JSON
 * serializable values should be used.
 */
var RelayCompilerCache = function () {

  /**
   * @param name         Human readable identifier for the cache
   * @param cacheBreaker This should be changed in order to invalidate existing
   *                     caches.
   */
  function RelayCompilerCache(name, cacheBreaker) {
    (0, _classCallCheck3['default'])(this, RelayCompilerCache);
    this._dir = null;

    this._name = name;
    this._cacheBreaker = cacheBreaker;
  }

  RelayCompilerCache.prototype._getFile = function _getFile(key) {
    if (this._dir == null) {
      // Include username in the cache dir to avoid issues with directories being
      // owned by a different user.
      var username = require('os').userInfo().username;
      var cacheID = require('crypto').createHash('md5').update(this._cacheBreaker).update(username).digest('hex');
      var dir = require('path').join(require('os').tmpdir(), this._name + '-' + cacheID);
      if (!require('fs').existsSync(dir)) {
        require('fs').mkdirSync(dir);
      }
      this._dir = dir;
    }
    return require('path').join(this._dir, key);
  };

  RelayCompilerCache.prototype.getOrCompute = function getOrCompute(key, compute) {
    var _this = this;

    return require('graphql-compiler').Profiler.run('RelayCompilerCache.getOrCompute', function () {
      var cacheFile = _this._getFile(key);
      if (require('fs').existsSync(cacheFile)) {
        try {
          return JSON.parse(require('fs').readFileSync(cacheFile, 'utf8'));
        } catch (e) {
          // ignore
        }
      }
      var value = compute();
      try {
        require('fs').writeFileSync(cacheFile, JSON.stringify(value), 'utf8');
      } catch (e) {
        // ignore
      }
      return value;
    });
  };

  return RelayCompilerCache;
}();

module.exports = RelayCompilerCache;