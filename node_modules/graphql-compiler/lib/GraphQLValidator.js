/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 * @format
 */

'use strict';

function validateOrThrow(document, schema, rules) {
  var validationErrors = require('graphql').validate(schema, document, rules);
  if (validationErrors && validationErrors.length > 0) {
    var formattedErrors = validationErrors.map(require('graphql').formatError);
    var errorMessages = validationErrors.map(function (e) {
      return e.source ? e.source.name + ': ' + e.message : e.message;
    });

    var error = new Error(require('util').format('You supplied a GraphQL document with validation errors:\n%s', errorMessages.join('\n')));
    error.validationErrors = formattedErrors;
    throw error;
  }
}

module.exports = {
  GLOBAL_RULES: [require('graphql').KnownArgumentNamesRule,
  // TODO #19327202 Relay Classic generates some fragments in runtime, so Relay
  // Modern queries might reference fragments unknown in build time
  // KnownFragmentNamesRule,
  // TODO: #25618795 Because of @argumentDefinitions, this validation
  // incorrectly flags a subset of fragments using @include/@skip as recursive.
  // NoFragmentCyclesRule,
  // TODO #19327144 Because of @argumentDefinitions, this validation
  // incorrectly marks some fragment variables as undefined.
  // NoUndefinedVariablesRule,
  // TODO #19327202 Queries generated dynamically with Relay Classic might use
  // unused fragments
  // NoUnusedFragmentsRule,
  require('graphql').NoUnusedVariablesRule,
  // TODO #19327202 Relay Classic auto-resolves overlapping fields by
  // generating aliases
  //OverlappingFieldsCanBeMergedRule,
  require('graphql').UniqueArgumentNamesRule, require('graphql').UniqueFragmentNamesRule, require('graphql').UniqueInputFieldNamesRule, require('graphql').UniqueOperationNamesRule, require('graphql').UniqueVariableNamesRule],
  LOCAL_RULES: [
  // TODO #13818691: make this aware of @fixme_fat_interface
  // FieldsOnCorrectTypeRule,
  require('graphql').FragmentsOnCompositeTypesRule, require('graphql').KnownTypeNamesRule,
  // TODO #17737009: Enable this after cleaning up existing issues
  // KnownDirectivesRule,
  require('graphql').LoneAnonymousOperationRule, require('graphql').PossibleFragmentSpreadsRule, require('graphql').ScalarLeafsRule, require('graphql').ValuesOfCorrectTypeRule, require('graphql').VariablesAreInputTypesRule, require('graphql').VariablesInAllowedPositionRule],
  validate: require('./GraphQLCompilerProfiler').instrument(validateOrThrow, 'GraphQLValidator.validate')
};